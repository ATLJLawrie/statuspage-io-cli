#!/bin/bash

###############################################################################
#
# ./statuspageio_update
#
# A script for sending a system message to a room.
#
# Usage:
#   ./statuspageio_update -t <token> -r <pageid> -f <component_id> -l (critical/warning/unknown/ok/down/up)
#
###############################################################################

# exit on failure
set -e

usage() {
  cat << EOF
Usage: $0 -t <token> -r <page_id> -f <component_id> -l <level> 

This script will set statuspage.io status based on the incoming Level

major_outage = critical, down
partial_outage = warning
degraded_performance = unknown
operational = ok, up


OPTIONS:
   -h             Show this message
   -t <token>     API token **REQUIRED
   -r <page_id>   Page id **REQUIRED
   -f <component_id> Component id **REQUIRED
   -l <level>     Nagios message level (critical, warning, unknown, ok, down, up) **REQUIRED
   -o             API host (default: api.statuspage.io)
   -v <version>   API version (default: v1)
EOF
}

TOKEN=""
PAGE_ID=""
COMPONENT_ID=""
LEVEL=""
HOST="api.statuspage.io"
API="v1"

while getopts “ht:r:f:o:l:v” OPTION; do
  case $OPTION in
    h) usage; exit 1;;
    t) TOKEN=$OPTARG;;
    r) PAGE_ID=$OPTARG;;
    f) COMPONENT_ID=$OPTARG;;
    l) LEVEL=$OPTARG;;
    o) HOST=$OPTARG;;
    v) API=$OPTARG;;
    [?]) usage; exit;;
  esac
done

# check for required args
if [[ -z $TOKEN ]] || [[ -z $PAGE_ID ]] || [[ -z $COMPONENT_ID ]] || [[ -z $LEVEL ]]
 then
  usage
  exit 1
fi

STATUS=""

# nagios levels
if [ ! -z "$LEVEL" ]; then
  if [[ $LEVEL == 'CRITICAL' ]] || [[ $LEVEL == 'critical' ]]; then
    STATUS="major_outage";
  elif [[ $LEVEL == 'WARNING' ]] || [[ $LEVEL == 'warning' ]]; then
    STATUS="partial_outage";
  elif [[ $LEVEL == 'UNKNOWN' ]] || [[ $LEVEL == 'unknown' ]]; then
    STATUS="degraded_performance";
  elif [[ $LEVEL == 'OK' ]] || [[ $LEVEL == 'ok' ]]; then
    STATUS="operational";
  elif [[ $LEVEL == 'DOWN' ]] || [[ $LEVEL == 'down' ]]; then
    STATUS="major_outage";
  elif [[ $LEVEL == 'UP' ]] || [[ $LEVEL == 'up' ]]; then
    STATUS="operational";
  fi
fi



# do the curl
if [ $API == 'v1' ]; then
 curl -sS \
    -H "Authorization: OAuth $TOKEN" \
    -X PATCH \
    -d "component[status]=$STATUS" \
    https://$HOST/v1/pages/$PAGE_ID/components/$COMPONENT_ID.json
else
 curl -sS \
    -H "Authorization: OAuth $TOKEN" \
    -X PATCH \
    -d "component[status]=$STATUS" \
    https://$HOST/$API/pages/$PAGE_ID/components/$COMPONENT_ID.json
fi
